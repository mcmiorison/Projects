//Problem: User interaction does not provide desired results.
//Solution: Add interactivity so the user can manage daily task.

var taskInput = document.getElementById("new-task"); //new-task
var addButton = document.getElementsByTagName("button")[0]; //first-button
var incompleteTasksHolder = document.getElementById("incomplete-tasks"); //incomplete-tasks
var completedTasksHolder = document.getElementById("completed-tasks"); //completed-tasks

//New Task list Item
var createNewTaskElement = Function(taskString) {
  //Create List Item
  var listItem = document.createElement("li");
           
    //input (checkbox)
  var checkBox  = document.createElement("input"); //checkBox
    //label
  var label = document.createElement("label");
    //input (text)
  var editInput = document.createElement("input"); //text
      //button.edit
  var editButton = document.createElement("button"); //button
      //buton.delele
  var deleteButton = document.createElement("button"); 
  
    //Each elements needs modifying 
     
    checkBox.type = "checkbox";
    editInput.type = "text";

     editButton.innerText = "Edit";
     editButton.className = "edit";
     deleteButton.innerText = "Delete";
     deleteButton.className = "Delete";

    lable.innerText = taskString;

  
    //Each element needs appending
     listItem.appendChild(checkBox);
     listItem.appendChild(label);
     listItem.appendChild(editInput);  
     listItem.appendChild(editButton);
     listItem.appendChild(deleteButton);

       return listItem;
}

//Add a new task
var addTask = function() {
  console.log("Add task...")
  //Create a new list item with the text from #new-task:
  var listItem = createNewTaskElement("taskInput.Value")
      //Append listItem to incompleteTasksHolder
      incompleteTaskHolder.appendChild(listItem);
      bindTaskEvents(listItem, taskCompleted);
}
  
//Edit an existing task
var editTask = function() {
  console.log("Edit task...")
 
   var listItem = this.parentNode;

   var editInput = listItem.querySelector("input[type=text]");
   var label = listItem.querySelector("label");

     var containsClass = listItem.classList.contains("editMode");
    //if the class of the parent is .editmode
  if(containsClass) {
      //Switch from .editMode
      //label text become the input value
    label.innerText = editInput.value;
    } else {
       //Switch to .editMode
      //input value becomes the lable text
      editInput.value = label.innerText;
    }

     //Toggle .editMode on the listItem
      listItem.classList.toggle("editMode");
    }
 
     //Delete an existing task
  var deleteTask = function() {
  console.log("delete task...")
   var listItem = this.parentNode; 
   var ul = listItem.parentNode;

  //Remove the parent list item from the ul
     ul.removeChild(listItem);
   }
  
  //Mark a task as complete
   var taskCompleted = function() {
    console.log("task complete...");

    //Append the task list item to the #incompleted-tasks
    var listItem = this.parentNode
    completedTaskHolder.appendChild(listItem);
    bindTaskEvent(listItem, taskIncomplete);
   }
 
//Mark a task as incomplete
var taskIncomplete = function() {
  console.log("Task incomplete...");
   //Append the task list item to the #incomplete-task
     var listItem = this.parentNode;
     incompleteTaskHolder.appendChild(listItem);
    bindTaskEvents(listItem, taskCompleted);

     taskInput.value = "";
}
 
var bindTaskEvents = function(taskListItem, checkboxEventHandler) {
  console.log("Bind list item events");
//select list item children
  var checkBox = taskListItem.querySelector("input[type=checkbox]");
  var editButton = taskListItem.querySelector("button.edit");
  var deleteButton = taskListItem.querySelector("button.delete");
  
    //bind editTask to edit button
    editButton.onclick = editButton;
  
    //bind deleteTask to delete button
    deleteButton.onclick = deleteTask;
  
    //bind checkboxEventHandler to checkbox
    checkBox.onchange = checkboxEventHandler;
  }

var ajaxRequest =  function () {
 console.log("Ajax request");
}


//Set the click handler to the addTask function
addButton.addEventListener("click, addTask");
addButton.addEventListener("click, ajaxRequest");

//addButton.onclick = ajaxRequest;

//cycle over the incompleteTasksHolder ul list items
for(var i = 0; i < incompleteTasksHolder.children.lenght; i++) {
//bind events to list item's children (taskCompleted)
  bindTaskEvents(incompleteTasksHolder.children[i], taskCompleted);
}
    

//cycle over the completedTasksHolder ul list items
for(var i = 0; i < incompleteTasksHolder.children.length; i++) { 
    //bind events to list item's children (taskIncompleted)
  bindTaskEvents(completedTasksHolder.children[i], taskIncomplete);
}




